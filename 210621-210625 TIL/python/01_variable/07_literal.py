# 07_literal.py

## 리터럴(literal)
# 고정된 "값"
# 변수에 저장되는 값
# x = 30 (30:리터럴)
# y = 3.14 (3.14 : 리터럴)

## 리터럴 종류
# 정수 리터럴
# 실수 리터럴
# 문자 리터럴
# 문자열 리터럴
# 논리 리터럴

'''
## 정수 리터럴
# 0, 75, -100 : 소수점이 없는 정수
# 0b로 시작하면 2진수
# 0o로 시작하면 8진수
# 0~9로 시작하면 10진수
# 0x로 시작하면 16진수
'''
# 정수
a = 0b1010 # 2진수
b = 300 # 10진수
c = 0o123 # 8진수
d = 0x12fc # 16진수
print(a, b, c, d) # 출력은 10진수로 출력이 된다. 2/8/16진수로 출력하고 싶다면 문자열로 구성

'''
## 실수 리터럴
# 0.25, -3.14 : 소수점이 있는 실수이거나
# e를 포함하는 지수표현 : 1.234e2 (0을 최소한으로 사용하여 표현하기 위해 나옴)
# 1.234e2 -> 123.4
# 1.0e2 -> 100
# 1.234e-2 -> 0.01234
'''
# 실수
f = 3.14
f1 = 1234.45
f2 = 1.234567e5

print(f, f1, f2)

'''
## 문자 리터럴
따옴표로 묶은 하나의 문자
'A'
"A"

# 문자열 리터럴
# 따옴표로 묶은 일련의 문자
# 작은 따옴표, 큰 따옴표, 삼중 따옴표 모두 사용 가능
# '홍길동'
# "Python"
# """Python Programming"""
'''
# 문자열
char1 = 'A'
char2 = 'B'

print(char1, char2)

str1 = '홍길동'
str2 = "Python"
str3 = """Python Programming"""
str4 = '''파이썬 프로그래밍'''

str5 = """ 여러줄로
나누어서
출력해도 됨"""

print(str5)

'''
# 논리값 리터럴
# True, False 값
# x = True

# 특수 리터럴
# None
# 값(객체)이 없음
# name = None
# Name = "
'''
# 논리값 / 특수 리터럴
t = True
f = False

print(t, f)

val = None
val1 = ''

print(type(val))
print(type(val1))

#####################################
# 한 줄의 코드를 여러줄에 나눠서 표현
"""
역슬래시(\) 또는
괄호(사용)
"""
a=1+2+3+\
4+5+6
b=(1+2+3+
   4+5+6)

print(a, b)

#####################################
# print 함수를 이용해서 문자열을 출력하고자 할 때 여러행 입력
print("긴 문장을 입력할 때 중간에서 엔터키를 치면"
      "다음행을 가고 자동으로 따옴표 처리되면서"
      "1줄로 인식로 인식되고 한줄로 출력") # 1줄로 표현

print("긴 문장을 입력할 때 중간에서 엔터키를 치면\n"
      "다음행을 가고 자동으로 따옴표 처리되면서\n"
      "1줄로 인식로 인식되고 한줄로 출력") # 3줄로 표현

# 세미콜론 (;) 을 사용해서 한 행에 입력 가능
print("한줄에") ; print("두개의 명령어")

## 주석을 사용하는 이유
# 프로그램에 관한 정보를 추가할 수 있다
# 수정이 용이하다
# 가독성을 높여 준다
# 코드를 이해하기 쉽다
# 다른 사람이 작성한 코드를 쉽게 해석할 수 있다
# 가능하면 코드에 주석을 붙이는 습관을 들인다.
